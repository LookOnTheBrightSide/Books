Interpreted, meaning you don't need a compiler to write and run Ruby. You can write it here at Codecademy or even on your own computer (many are shipped with the Ruby interpreter built inâ€”we'll get to the interpreter later in this lesson).

Object-oriented, meaning it allows users to manipulate data structures called objects in order to build and execute programs. We'll learn more about objects later, but for now, all you need to know is everything in Ruby is an object.

'puts' and 'print'
The print command just takes whatever you give it and prints it to the screen. puts (for "put string") is slightly different: it adds a new (blank) line after the thing you want it to print.

Everything in Ruby is an Object
Because everything in Ruby is an object (more on this later), everything in Ruby has certain built-in abilities called methods. You can think of methods as "skills" that certain objects have. For instance, strings (words or phrases) have built-in methods that can tell you the length of the string, reverse the string, and more.

=begin
I'm a comment!
I don't need any # symbols.
=end

Naming Conventions
There are many different kinds of variables you'll encounter as you progress through these courses, but right now we're just concerned with regular old local variables. By convention, these variables should start with a lowercase letter and words should be separated by underscores, like counter and masterful_method. Ruby won't stop you from starting your local variables with other symbols, such as capital letters, $s, or @s, but by convention these mean different things, so it's best to avoid confusion by doing what the Ruby community does.

//get from user
variable_name = gets.chomp




print "What's your first name?"
first_name.gets.chomp
print "lastname?"
last_name.gets.chomp
print "city"
city.gets.chomp
print "state"
state.gets.chomp


string interpolation
first_name = "Kevin"
puts "Your name is #{first_name}!"

If
Ruby's if statement takes an expression
if 1 < 2
  print "I'm getting printed because one is less than two!"
end



fruits.each do |fruit|
  puts fruit
end







File/Folder	Purpose
app/	
Contains the controllers, models, and views for your application. You will do most of your work here.

config/	
Configure your application's runtime rules, routes, database, and more.

db/	
Shows your current database schema, as well as the database migrations.

public/	
The only folder seen to the world as-is. If you put files in here, they will be served directly without any processing by Rails.

app/assets/	
This is where your images, JavaScript, stylesheets (CSS), and other static files should go. Modern Rails apps use something called the Assets Pipeline, which combines all the JavaScript and CSS files in this directory into a single file for speediness.



rails generate scaffold topic title:string description:text



generate scaffold tells Rails to create everything necessary to get up and running with topics.
topic tells Rails the name of the new model.
title:string says that topics have a title, which is a "string".
description:text says that topics have a description which is a "text". (What's the difference between "string" and "text"? Basically "text" is for strings that might be very long.)



rake db:migrate
This tells Rails to update the database to include a table for our new model.



Rake

rake (ruby make) is a tool that allows you to run small Ruby programs (tasks) that you use often in your application.

Here, rake db:migrate is a task provided by the Rails framework. It uses the migration file we just created (db/migrate/201xxxxxxxxxxx_create_topics.rb) to change the database. Database migration files can be crucial to code collaboration.






app/models/topic.rb

This file contains code for our topic model. If you look at it, it's nearly blank. Creating, reading, updating, and deleting records are built into Rails.
app/views/topics

This folder contains all the views for our topics model. This is where the code for the forms you used above is stored. Rails created all of these pages as part of the scaffold.
If you've written HTML before, many lines in the views should look familiar. Rails views are HTML with some extra code added to display data from the database.
app/views/topics/index.html.erb

This is the code for the page that lists all the topics.
Index is the name given to the "default" page for a web site or a section of a web site. When you navigate to http://localhost:3000/topics the topics index page is what is sent to your computer.
app/views/topics/show.html.erb

This is the page you get when you click the "Show" link on the "Listing topics" page.
app/views/topics/new.html.erb

This is the page you get when you click "New Topic".
app/views/topics/edit.html.erb

This is the page you get when you click "Edit".
app/views/topics/_form.html.erb

You may have noticed that the page for new topics and the page to edit topics looked similar. That's because they both use the code from this file to show a form. This file is called a partial since it only contains code for part of a page. Partials always have filenames starting with an underscore character.
Challenge question: Can you find the line of code in new.html.erb and edit.html.erb that makes the form partial appear?
app/controllers/topics_controller.rb

This is the controller file that Rails created as part of the scaffold
If you look you'll see a method (a line beginning with def) for each of the views listed above (except _form.html.erb)




Model

For all the Models we create in RailsBridge, Model objects have a corresponding record in the the database. The name of the table in the database is the plural version of the Model's class name. For example, if the Model is called 'Duck', it will automatically query or write to the 'ducks' table in the database.
Methods internal to Rails make it easy to automatically write records to the the database and query the database to get the records again later.
The Model is a bridge between the database and your application's code.





rails generate model vote topic_id:integer
rake db:migrate


